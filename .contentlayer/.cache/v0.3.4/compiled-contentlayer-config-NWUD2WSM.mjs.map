{
  "version": 3,
  "sources": ["../../../contentlayer.config.js"],
  "sourcesContent": ["import { makeSource, defineDocumentType } from '@contentlayer/source-files';\r\nimport { group } from 'console';\r\nimport readingTime from \"reading-time\";\r\nimport rehypeAutolinkHeadings from 'rehype-autolink-headings';\r\nimport rehypeSlug from \"rehype-slug\";\r\nimport GithubSlugger from 'github-slugger';\r\n\r\nconst Blog = defineDocumentType(() => ({\r\n    name: \"Blog\",\r\n    filePathPattern: \"**/**/*.mdx\",\r\n    contentType: \"mdx\",\r\n    fields: {\r\n      title: {\r\n        type: \"string\",\r\n        required: true,\r\n      },\r\n      publishedAt:{\r\n        type: \"date\",\r\n        required: true,\r\n      },\r\n      updatedAt:{\r\n        type: \"date\",\r\n        required: true,\r\n      },\r\n      description: {\r\n        type: \"string\",\r\n        required: true,\r\n      },\r\n      image:{\r\n        type: \"image\",\r\n      },\r\n      isPublished:{\r\n        type: \"boolean\",\r\n        default: true,\r\n      },\r\n      author: {\r\n        type: \"string\",\r\n        required: true,\r\n      },\r\n      tags:{\r\n        type :'list',\r\n        of: {type: 'string'},\r\n      },\r\n    },\r\n    computedFields:{\r\n      url:{\r\n        type:\"string\",\r\n        resolve: (doc) => `/blogs/${doc._raw.flattenedPath}`,\r\n      },\r\n      readingTime:{\r\n        type:\"json\",\r\n        resolve: (doc)=> readingTime(doc.body.raw)\r\n      },\r\n      toc:{\r\n        type: \"json\",\r\n        resolve: async(doc) =>{\r\n          const regulrExp = /\\n(?<flag>#{1,6})\\s+(?<content>.+)/g;\r\n          const slugger = new GithubSlugger()\r\n          const headings = Array.from(doc.body.raw.matchAll(regulrExp)).map(({groups})=>{\r\n            const flag = groups?.flag;\r\n            const content = groups?.content;\r\n\r\n            return{\r\n              level: flag?.length == 1 ? \"one\" : flag?.length == 2 ? \"two\" : \"three\",\r\n              text: content,\r\n              slug: content ? slugger.slug(content) : undefined\r\n            }\r\n          })\r\n\r\n          return headings;\r\n        }\r\n      }\r\n    }\r\n  }))\r\n\r\nexport default makeSource({\r\n    contentDirPath: 'content',\r\n    documentTypes: [Blog],\r\n    mdx: { rehypePlugins: [rehypeSlug, [rehypeAutolinkHeadings, {behaviour:\"append\"}]]}\r\n})\r\n"],
  "mappings": ";AAAA,SAAS,YAAY,0BAA0B;AAC/C,SAAS,aAAa;AACtB,OAAO,iBAAiB;AACxB,OAAO,4BAA4B;AACnC,OAAO,gBAAgB;AACvB,OAAO,mBAAmB;AAE1B,IAAM,OAAO,mBAAmB,OAAO;AAAA,EACnC,MAAM;AAAA,EACN,iBAAiB;AAAA,EACjB,aAAa;AAAA,EACb,QAAQ;AAAA,IACN,OAAO;AAAA,MACL,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAY;AAAA,MACV,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,WAAU;AAAA,MACR,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,aAAa;AAAA,MACX,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,OAAM;AAAA,MACJ,MAAM;AAAA,IACR;AAAA,IACA,aAAY;AAAA,MACV,MAAM;AAAA,MACN,SAAS;AAAA,IACX;AAAA,IACA,QAAQ;AAAA,MACN,MAAM;AAAA,MACN,UAAU;AAAA,IACZ;AAAA,IACA,MAAK;AAAA,MACH,MAAM;AAAA,MACN,IAAI,EAAC,MAAM,SAAQ;AAAA,IACrB;AAAA,EACF;AAAA,EACA,gBAAe;AAAA,IACb,KAAI;AAAA,MACF,MAAK;AAAA,MACL,SAAS,CAAC,QAAQ,UAAU,IAAI,KAAK,aAAa;AAAA,IACpD;AAAA,IACA,aAAY;AAAA,MACV,MAAK;AAAA,MACL,SAAS,CAAC,QAAO,YAAY,IAAI,KAAK,GAAG;AAAA,IAC3C;AAAA,IACA,KAAI;AAAA,MACF,MAAM;AAAA,MACN,SAAS,OAAM,QAAO;AACpB,cAAM,YAAY;AAClB,cAAM,UAAU,IAAI,cAAc;AAClC,cAAM,WAAW,MAAM,KAAK,IAAI,KAAK,IAAI,SAAS,SAAS,CAAC,EAAE,IAAI,CAAC,EAAC,OAAM,MAAI;AAC5E,gBAAM,OAAO,QAAQ;AACrB,gBAAM,UAAU,QAAQ;AAExB,iBAAM;AAAA,YACJ,OAAO,MAAM,UAAU,IAAI,QAAQ,MAAM,UAAU,IAAI,QAAQ;AAAA,YAC/D,MAAM;AAAA,YACN,MAAM,UAAU,QAAQ,KAAK,OAAO,IAAI;AAAA,UAC1C;AAAA,QACF,CAAC;AAED,eAAO;AAAA,MACT;AAAA,IACF;AAAA,EACF;AACF,EAAE;AAEJ,IAAO,8BAAQ,WAAW;AAAA,EACtB,gBAAgB;AAAA,EAChB,eAAe,CAAC,IAAI;AAAA,EACpB,KAAK,EAAE,eAAe,CAAC,YAAY,CAAC,wBAAwB,EAAC,WAAU,SAAQ,CAAC,CAAC,EAAC;AACtF,CAAC;",
  "names": []
}
